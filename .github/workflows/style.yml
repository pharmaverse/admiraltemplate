---
name: Style ðŸŽ½

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - devel
      - pre-release
  pull_request:
    branches:
      - main
      - devel
      - pre-release

concurrency:
  group: style-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  style:
    name: Code Style ðŸ‘š
    runs-on: ubuntu-20.04
    if: >
      !contains(github.event.commits[0].message, '[skip style]')

    steps:
      - name: Get branch names ðŸŒ¿
        id: branch-name
        uses: tj-actions/branch-names@v5

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup R ðŸ“Š
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: 3.6

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.local/cache/renv
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys: ${{ runner.os }}-renv-

      - name: Run Staged dependencies ðŸŽ¦
        uses: insightsengineering/staged-dependencies-action@v1
        with:
          run-system-dependencies: true
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
          SD_ENABLE_CHECK: false
          SD_GIT_REF: ${{ steps.branch-name.outputs.head_ref_branch }}

      - name: Get changed files ðŸ—ž
        id: changed-files
        uses: tj-actions/changed-files@v17
        with:
          separator: ","
          files: |
            **.R
            **.Rmd
            **.Rnw
            **.Rmarkdown
            **.qmd

      - name: Run styler ðŸ‘Ÿ
        run: |
          changed_files <- unlist(strsplit(
            "${{ steps.changed-files.outputs.all_changed_files }}",
            split=","
          ))
          is_r_file <- function(x) {
              ext <- tools::file_ext(x)
              ext %in% c("R", "Rmd", "Rnw", "Rmarkdown")
          }
          changed_r_files <- Filter(is_r_file, changed_files)
          detect <- styler::style_file(changed_r_files, dry = "on")
          if (TRUE %in% detect$changed) {
            problems <- subset(detect$file, detect$changed == T)
            cat(paste(
              "â˜  One or more files had styling errors.",
              "Please see the log above for remediations,",
              "or simply run the following commands",
              "for an immediate fix:\n"
            ))
            cat("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
            cat(paste0(
              "styler::style_file(", capture.output(dput(problems)), ")\n"
            ))
            cat("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
            quit(status = length(problems))
          }
        shell: Rscript {0}
